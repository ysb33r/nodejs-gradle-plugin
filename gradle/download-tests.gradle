// This is based upon what Rob Fletcher has done at
// https://raw.githubusercontent.com/robfletcher/gradle-compass/master/gradle/download-tests.gradle

ext {
    currentOS =  org.gradle.internal.os.OperatingSystem.current()
    nodejsTestCacheDir = "${buildDir}/nodejs-binaries"

    // Always list the primary test version as the first one in this list.
    nodejsTestVersions = [ '7.10.0','6.10.3' ]

}

configurations {
    downloadTestCompile {
        extendsFrom testCompile
    }
    downloadTestRuntime {
        extendsFrom downloadTestCompile, testRuntime
    }

    nodejsTestVersions.each { ver ->
        create "downloadTestCache${ver}"
    }

}

dependencies {
    nodejsTestVersions.each { ver ->
        def nodejsArch
        def nodejsExt

        if(currentOS.windows) {
            nodejsExt = 'zip'
            if (System.getProperty('os.arch').contains('64')) {
                nodejsArch = 'win-x64'
            } else {
                nodejsArch = 'win-x86'
            }
        } else if (currentOS.linux) {
                nodejsExt = 'tar.xz'
            if (System.getProperty('os.arch').contains('64')) {
                nodejsArch = 'linux-x64'
            } else {
                nodejsArch = 'linux-x86'
            }
        } else if (currentOS.macOsX) {
            nodejsExt = 'tar.gz'
            nodejsArch = 'darwin-x64'
        }

        add "downloadTestCache${ver}", ":node:${ver}:${nodejsArch}@${nodejsExt}"
    }
}

sourceSets {
    downloadTest {
        java.srcDir file("src/downloadTest/java")
        groovy.srcDir file("src/downloadTest/groovy")
        resources.srcDir file("src/downloadTest/resources")
        compileClasspath = sourceSets.main.output +  configurations.downloadTestCompile
        runtimeClasspath = output + compileClasspath + configurations.downloadTestRuntime
    }
}

task cacheNodejsBinaries( type : Copy ) {
    into nodejsTestCacheDir
    nodejsTestVersions.each { ver ->
        from configurations.getByName("downloadTestCache${ver}"), {
            into "v${ver}"
            rename ~/^node-(.+)/, 'node-v$1'
        }
    }
}

task downloadTest(type: Test, dependsOn: jar) {
    testClassesDir = sourceSets.downloadTest.output.classesDir
    classpath = sourceSets.downloadTest.runtimeClasspath
    reports.html.destination = file("${reporting.baseDir}/downloadTest")

    systemProperties NODEJS_CACHE_DIR  : cacheNodejsBinaries.destinationDir.absolutePath
    systemProperties NODEJS_VERSION    : nodejsTestVersions[0]
    systemProperties 'TESTFSREADROOT'  : file("${projectDir}/src/downloadTest/resources").absolutePath
    systemProperties 'TESTFSWRITEROOT' : file("${buildDir}/tmp/downloadTest").absolutePath
    systemProperties 'DOXY_TEMPLATE'   : file("${projectDir}/src/main/resources/doxyfile-template.dox").absolutePath

    mustRunAfter test
    dependsOn cacheNodejsBinaries
}


check.dependsOn downloadTest


